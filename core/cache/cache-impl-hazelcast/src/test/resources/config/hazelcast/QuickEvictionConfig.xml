<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ #%L
  Nazgul Project: nazgul-core-cache-impl-hazelcast
  %%
  Copyright (C) 2010 - 2015 jGuru Europe AB
  ~
  %%
  Licensed under the jGuru Europe AB license (the "License"), based
  on Apache License, Version 2.0; you may not use this file except
  in compliance with the License.
  
  You may obtain a copy of the License at
  
        http://www.jguru.se/licenses/jguruCorporateSourceLicense-2.0.txt
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<hazelcast
        xsi:schemaLocation="http://www.hazelcast.com/schema/config http://www.hazelcast.com/schema/config/hazelcast-config-3.3.xsd"
        xmlns="http://www.hazelcast.com/schema/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <group>
        <name>unittest-cache-group</name>
        <password>unittest-pass</password>
    </group>
    <management-center enabled="false">http://localhost:18080/hazelcast/management/center</management-center>
    <network>
        <port auto-increment="true" port-count="2">5701</port>
        <outbound-ports>
            <!--
                Definition:         Allowed port range when connecting to other nodes.
                Special values:     The value 0 or * is substituted for the system provided port.
            -->
            <ports>0</ports>
        </outbound-ports>
        <join>
            <multicast enabled="false">
                <multicast-group>224.2.2.3</multicast-group>
                <multicast-port>54327</multicast-port>
            </multicast>
            <tcp-ip enabled="true">
                <!-- interface>::1</interface -->
                <interface>127.0.0.1</interface>
            </tcp-ip>
        </join>
        <interfaces enabled="false">
            <interface>10.0.0.*</interface>
        </interfaces>
    </network>
    <partition-group enabled="false"/>

    <!--
        Define the boundaries for the Executor service, which is the
        in-cache command pattern execution thread pool.
    -->
    <executor-service name="nazgul_hazelcast_executorservice">
        <pool-size>16</pool-size>

        <!--
            Definition:         The Hazelcast queue depth.
            Permitted range:    [0, Integer.MAX_VALUE]
            Special values:     The value 0 is subtituted for Integer.MAX_VALUE.

            When a JVM's local queue size reaches the maximum, all put/offer operations will
            get blocked until the queue size of the JVM goes down below the maximum.
        -->
        <queue-capacity>0</queue-capacity>
    </executor-service>

    <!--
        Default queue definition - boundaryless without eviction.
    -->
    <queue name="default">
        <!--
            Maximum size of the queue. When a JVM's local queue size reaches the maximum,
            all put/offer operations will get blocked until the queue size
            of the JVM goes down below the maximum.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. Default is 0.
        -->
        <max-size>0</max-size>
        <!--
            Number of backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. 0 means no backup.
        -->
        <backup-count>1</backup-count>

        <!--
            Number of async backups. 0 means no backup.
        -->
        <async-backup-count>0</async-backup-count>

        <!--
            Definition:         Max number of seconds for each item to stay in the queue.
            Permitted range:    [0, Integer.MAX_VALUE]
            Special values:     The value 0 means infinite (i.e. eviction will not be done).

            Items that are not consumed in <time-to-live-seconds> will
            automatically get evicted from the queue.
        -->
        <empty-queue-ttl>-1</empty-queue-ttl>
    </queue>

    <!--
        Default (distributed) map definition - 1 backup, boundaryless without eviction.
    -->
    <map name="quickEvictionMap">
        <!--
           Data type that will be used for storing recordMap.
           Possible values:
           BINARY (default): keys and values will be stored as binary data
           OBJECT : values will be stored in their object forms
           OFFHEAP : values will be stored in non-heap region of JVM
        -->
        <in-memory-format>OBJECT</in-memory-format>

        <!--
            Number of backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. 0 means no backup.
        -->
        <backup-count>0</backup-count>
        <!--
            Number of async backups. 0 means no backup.
        -->
        <async-backup-count>0</async-backup-count>
        <!--
			Maximum number of seconds for each entry to stay in the map. Entries that are
			older than <time-to-live-seconds> and not updated for <time-to-live-seconds>
			will get automatically evicted from the map.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
		-->
        <time-to-live-seconds>0</time-to-live-seconds>
        <!--
			Maximum number of seconds for each entry to stay idle in the map. Entries that are
			idle(not touched) for more than <max-idle-seconds> will get
			automatically evicted from the map. Entry is touched if get, put or containsKey is called.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
		-->
        <max-idle-seconds>0</max-idle-seconds>
        <!--
            Valid values are:
            NONE (no eviction),
            LRU (Least Recently Used),
            LFU (Least Frequently Used).
            NONE is the default.
        -->
        <eviction-policy>LRU</eviction-policy>
        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. Default is 0.
        -->
        <max-size policy="PER_NODE">4</max-size>
        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <eviction-percentage>20</eviction-percentage>
        <!--
            Minimum time in milliseconds which should pass before checking
            if a partition of this map is evictable or not.
            Default value is 100 millis.
        -->
        <min-eviction-check-millis>100</min-eviction-check-millis>
        <!--
            While recovering from split-brain (network partitioning),
            map entries in the small cluster will merge into the bigger cluster
            based on the policy set here. When an entry merge into the
            cluster, there might an existing entry with the same key already.
            Values of these entries might be different for that same key.
            Which value should be set for the key? Conflict is resolved by
            the policy set here. Default policy is PutIfAbsentMapMergePolicy

            There are built-in merge policies such as
            com.hazelcast.map.merge.PassThroughMergePolicy; entry will be added if there is no existing entry for the key.
            com.hazelcast.map.merge.PutIfAbsentMapMergePolicy ; entry will be added if the merging entry doesn't exist in the cluster.
            com.hazelcast.map.merge.HigherHitsMapMergePolicy ; entry with the higher hits wins.
            com.hazelcast.map.merge.LatestUpdateMapMergePolicy ; entry with the latest update wins.
        -->
        <merge-policy>com.hazelcast.map.merge.PassThroughMergePolicy</merge-policy>
    </map>

    <!--
        Default (distributed) map definition - 1 backup, boundaryless without eviction.
    -->
    <map name="clusterWide_commonCacheMap">
        <!--
            Definition:         Number of backups.
            Permitted range:    [0, 3]
            Special values:     The value 0 means no backup.

            Number of backups (extra copies) of the instances within each distributed map.
            If 1 is set as the backup-count for example, then all entries of the map will
            be copied to 1 other JVM for fail-safety.
        -->
        <backup-count>1</backup-count>

        <!--
            Definition:         Eviction policy, implying how cache eviction is done.
            Permitted values:   {NONE, LRU, LFU}

            Value explanation:
                NONE    :=      No eviction.
                LRU     :=      Least Recently Used.
                LFU     :=      Least Frequently Used.
        -->
        <eviction-policy>NONE</eviction-policy>

        <!--
            Definition:         Max mapSize.
            Permitted range:    [0, Integer.MAX_VALUE]
            Special values:     The value 0 is subtituted for Integer.MAX_VALUE.

            When max size is reached, map is evicted based on the policy defined.
        -->
        <max-size>0</max-size>

        <!--
            Definition:         The percentage of the map that will be evicted when the max-size is reached.
            Permitted values:   [0, 100]

            Any integer between 0 and 100. If 25 is set for example, 25% of the entries will get evicted.
        -->
        <eviction-percentage>25</eviction-percentage>

        <!--
            Definition:         While recovering from split-brain (network partitioning), map entries in the
                                small cluster will merge into the bigger cluster based on the policy set here.
                                When an entry merge into the cluster, there might an existing entry with the
                                same key already. Values of these entries might be different for that same key.
                                Which value should be set for the key? Conflict is resolved by
                                the policy set here. Default policy is hz.ADD_NEW_ENTRY
            Permitted values:   {hz.NO_MERGE, hz.ADD_NEW_ENTRY, hz.HIGHER_HITS, hz.LATEST_UPDATE}

            Value explanation:
                hz.NO_MERGE         := No entry will merge.
                hz.ADD_NEW_ENTRY    := Entry will be added if the merging entry's key doesn't exist in the cluster.
                hz.HIGHER_HITS      := Entry with the higher hits wins.
                hz.LATEST_UPDATE    := Entry with the latest update wins.
        -->
        <merge-policy>hz.ADD_NEW_ENTRY</merge-policy>
    </map>

    <map name="default">
        <near-cache>

            <!--
                Definition:         Max number of seconds for each item to stay in the near cache.
                Permitted range:    [0, Integer.MAX_VALUE]
                Special values:     The value 0 means infinite (i.e. eviction will not be done).

                Items that are not consumed in <time-to-live-seconds> will
                automatically get evicted from the near cache.
            -->
            <time-to-live-seconds>0</time-to-live-seconds>

            <!--
                Definition:         Max number of seconds each entry can stay in the near cache as untouched (not-read).
                Permitted range:    [0, Integer.MAX_VALUE]
                Special values:     The value 0 means infinite (i.e. eviction will not be done).

                Entries that are not read (touched) more than <max-idle-seconds> value
                will get removed from the near cache.
            -->
            <max-idle-seconds>60</max-idle-seconds>

            <!--
                Definition:         Eviction policy, implying how cache eviction is done.
                                    Regardless of the eviction policy used, <time-to-live-seconds> will still apply.
                Permitted values:   {NONE, LRU, LFU}

                Value explanation:
                    NONE    :=      No eviction.
                    LRU     :=      Least Recently Used.
                    LFU     :=      Least Frequently Used.
            -->
            <eviction-policy>LRU</eviction-policy>

            <!--
                Definition:         Max mapSize.
                Permitted range:    [0, Integer.MAX_VALUE]
                Special values:     The value 0 is subtituted for Integer.MAX_VALUE.

                When max size is reached, map is evicted based on the policy defined.
            -->
            <max-size>5000</max-size>

            <!--
                Definition:         Should the cached entries get evicted if the entries are changed (updated or removed).
                Permitted range:    [true, false]
            -->
            <invalidate-on-change>true</invalidate-on-change>
        </near-cache>
    </map>

    <multimap name="default">
        <backup-count>1</backup-count>
        <value-collection-type>SET</value-collection-type>
    </multimap>

    <multimap name="default">
        <backup-count>1</backup-count>
        <value-collection-type>SET</value-collection-type>
    </multimap>

    <list name="default">
        <backup-count>1</backup-count>
    </list>

    <set name="default">
        <backup-count>1</backup-count>
    </set>

    <jobtracker name="default">
        <max-thread-size>0</max-thread-size>
        <!-- Queue size 0 means number of partitions * 2 -->
        <queue-size>0</queue-size>
        <retry-count>0</retry-count>
        <chunk-size>1000</chunk-size>
        <communicate-stats>true</communicate-stats>
        <topology-changed-strategy>CANCEL_RUNNING_OPERATION</topology-changed-strategy>
    </jobtracker>

    <semaphore name="default">
        <initial-permits>0</initial-permits>
        <backup-count>1</backup-count>
        <async-backup-count>0</async-backup-count>
    </semaphore>

    <serialization>
        <portable-version>0</portable-version>
    </serialization>

    <services enable-defaults="true"/>

    <properties>
        <property name="hazelcast.logging.type">slf4j</property>
    </properties>

</hazelcast>
